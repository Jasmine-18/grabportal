//
//
var script = { name: 'SVirusBlock'};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "svg",
    {
      attrs: {
        width: "1em",
        height: "1em",
        viewBox: "0 0 24 24",
        fill: "currentColor"
      }
    },
    [
      _c("path", {
        attrs: {
          d:
            "M18.952 17.538c-.749-.749-.908-1.869-.5-2.846.007-.017.014-.032.021-.049C18.872 13.669 19.782 13 20.835 13c.052 0 .08 0 .08 0C21.553 13 22 12.553 22 12s-.447-1-1-1h-.17c-1.053 0-1.958-.669-2.357-1.644-.007-.017-.014-.032-.021-.049-.408-.977-.249-2.097.5-2.846l.119-.119c.391-.391.391-1.023 0-1.414s-1.023-.391-1.414 0l-.119.119c-.749.749-1.869.908-2.846.5-.017-.007-.032-.014-.049-.021C13.669 5.128 13 4.218 13 3.165c0-.052 0-.081 0-.081C13 2.447 12.553 2 12 2s-1 .447-1 1v.036c0 1.096-.66 2.084-1.673 2.503L9.321 5.542C8.309 5.961 7.143 5.729 6.368 4.954L6.343 4.929 3.707 2.293 2.293 3.707l18 18 1.414-1.414-2.636-2.636L18.952 17.538zM12 10c0-1.104.896-2 2-2s2 .896 2 2-.896 2-2 2c-.257 0-.501-.053-.728-.142l-1.131-1.131C12.053 10.501 12 10.257 12 10zM8 13c-.553 0-1-.448-1-1 0-.245.099-.461.244-.635L5.431 9.552C4.983 10.433 4.083 11 3.085 11H3.084C2.447 11 2 11.447 2 12s.447 1 1 1h.068c1.076 0 2.047.648 2.459 1.644l.021.049c.415 1.004.186 2.16-.583 2.929l-.036.036c-.391.391-.391 1.023 0 1.414s1.023.391 1.414 0l.036-.036c.769-.769 1.924-.998 2.929-.583l.143.06C10.389 18.9 11 19.815 11 20.83v.085C11 21.553 11.447 22 12 22s1-.448 1-1v-.17c0-.976.568-1.853 1.443-2.266l-5.809-5.809C8.461 12.901 8.245 13 8 13z"
        }
      })
    ]
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__ = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    undefined,
    undefined,
    undefined
  );

export default __vue_component__;
