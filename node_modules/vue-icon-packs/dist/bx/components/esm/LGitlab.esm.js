//
//
var script = { name: 'LGitlab'};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "svg",
    {
      attrs: {
        width: "1em",
        height: "1em",
        viewBox: "0 0 24 24",
        fill: "currentColor"
      }
    },
    [
      _c("path", {
        attrs: {
          d:
            "M20.892,9.889c-0.006-0.029-0.015-0.059-0.025-0.087l-2.104-6.479c-0.116-0.342-0.438-0.572-0.8-0.57 c-0.361-0.002-0.681,0.231-0.789,0.575l-2.006,6.175H8.834L6.826,3.327C6.718,2.984,6.398,2.751,6.04,2.752H6.034 c-0.361,0-0.682,0.232-0.795,0.575L3.133,9.815c0,0.005-0.005,0.01-0.007,0.016l-1.067,3.281c-0.161,0.494,0.013,1.034,0.435,1.34 l9.227,6.706c0.167,0.121,0.393,0.12,0.558-0.003l9.229-6.703c0.419-0.306,0.596-0.846,0.435-1.34L20.892,9.889z M17.97,3.936 l1.809,5.566H16.16L17.97,3.936z M6.03,3.936l1.812,5.566H4.228L6.03,3.936z M3.048,13.688c-0.09-0.064-0.127-0.18-0.093-0.284 l0.793-2.437l5.817,7.456L3.048,13.688z M4.547,10.449h3.601l2.573,7.916L4.547,10.449z M11.999,19.243l-2.856-8.798h5.718 l-1.792,5.515L11.999,19.243z M13.281,18.366l2.467-7.588l0.106-0.329h3.604l-5.586,7.156L13.281,18.366z M20.952,13.688 l-6.519,4.733l0.022-0.029l5.794-7.425l0.792,2.436C21.078,13.509,21.04,13.624,20.952,13.688z"
        }
      })
    ]
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__ = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    undefined,
    undefined,
    undefined
  );

export default __vue_component__;
