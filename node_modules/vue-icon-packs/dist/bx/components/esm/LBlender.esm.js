//
//
var script = { name: 'LBlender'};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "svg",
    {
      attrs: {
        width: "1em",
        height: "1em",
        viewBox: "0 0 24 24",
        fill: "currentColor"
      }
    },
    [
      _c("path", {
        attrs: {
          d:
            "M13.064,11.461c0.037-0.667,0.363-1.254,0.856-1.671l0,0 c0.483-0.41,1.134-0.659,1.844-0.66l0,0c0.71,0,1.36,0.25,1.845,0.66l0,0c0.492,0.417,0.819,1.005,0.856,1.671 c0.038,0.686-0.237,1.323-0.721,1.795l0,0c-0.493,0.48-1.195,0.782-1.979,0.782l0,0c-0.786,0-1.488-0.302-1.981-0.782l0,0 C13.301,12.784,13.025,12.147,13.064,11.461z",
          transform: "translate(-.637 1.55)"
        }
      }),
      _c("path", {
        attrs: {
          d:
            "M8.761,12.811c0.005,0.26,0.089,0.767,0.213,1.164l0,0 c0.263,0.838,0.708,1.615,1.328,2.299l0,0c0.636,0.703,1.419,1.268,2.323,1.667l0,0c0.951,0.421,1.981,0.637,3.05,0.635l0,0 c1.069-0.002,2.1-0.221,3.051-0.645l0,0c0.903-0.405,1.686-0.971,2.321-1.675l0,0c0.619-0.687,1.063-1.464,1.326-2.303l0,0 c0.134-0.424,0.216-0.854,0.25-1.285l0,0c0.033-0.425,0.019-0.852-0.041-1.277l0,0c-0.118-0.829-0.405-1.607-0.847-2.317 c-0.405-0.651-0.925-1.222-1.545-1.703l0,0l0.001-0.001l0,0l-6.249-4.799l0,0c-0.005-0.005-0.011-0.009-0.016-0.014l0,0 c-0.411-0.314-1.101-0.313-1.551,0.002l0,0c-0.457,0.319-0.508,0.846-0.104,1.18l0,0l-0.001,0.001l0,0l2.606,2.121L6.933,5.87l0,0 c-0.004,0-0.008,0-0.012,0l0,0c-0.656,0-1.287,0.432-1.412,0.976l0,0C5.381,7.401,5.827,7.861,6.51,7.863l0,0L6.509,7.866l0,0 l4.027-0.008l-7.188,5.516l0,0c-0.009,0.007-0.019,0.014-0.027,0.021l0,0c-0.677,0.519-0.896,1.382-0.47,1.929l0,0 c0.434,0.556,1.354,0.556,2.04,0.002l0,0l3.922-3.209C8.814,12.117,8.757,12.55,8.761,12.811L8.761,12.811z M18.839,14.261 c-0.808,0.824-1.938,1.291-3.163,1.293l0,0c-1.226,0.002-2.356-0.461-3.165-1.283l0,0c-0.396-0.401-0.686-0.861-0.864-1.352l0,0 c-0.176-0.482-0.244-0.994-0.199-1.511l0,0c0.044-0.505,0.193-0.987,0.434-1.422l0,0c0.236-0.429,0.562-0.815,0.962-1.144l0,0 c0.785-0.64,1.785-0.987,2.832-0.988l0,0c1.047-0.001,2.046,0.343,2.832,0.98l0,0c0.399,0.326,0.725,0.711,0.961,1.139l0,0 c0.24,0.436,0.39,0.916,0.434,1.421l0,0c0.045,0.517-0.023,1.028-0.198,1.511l0,0C19.524,13.398,19.234,13.859,18.839,14.261 L18.839,14.261z",
          transform: "translate(-.637 1.55)"
        }
      })
    ]
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__ = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    undefined,
    undefined,
    undefined
  );

export default __vue_component__;
